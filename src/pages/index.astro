---
import "../styles/global.css";
import { getCollection } from "astro:content";

const cards = await getCollection("cards");

// Unique collection names for the dropdown
const collectionNames = [...new Set(cards.map((c) => c.data.collection_name))]
  .filter(Boolean)
  .sort();
---

<html lang="en" class="h-full dark">
  <head>
    <meta charset="utf-8" />
    <title>All Cubone Cards</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Prevent theme FOUC: default to dark unless user explicitly chose light -->
    <script>
      (() => {
        const stored = localStorage.getItem("theme");
        if (stored === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }
      })();
    </script>
  </head>

  <body
    class="h-full bg-slate-50 text-slate-900 antialiased dark:bg-slate-950 dark:text-slate-100"
  >
    <!-- Top hero -->
    <header class="relative isolate overflow-hidden">
      <div
        aria-hidden="true"
        class="pointer-events-none absolute inset-0 -z-10 bg-gradient-to-b from-indigo-50 via-transparent to-transparent dark:from-indigo-900/30"
      >
      </div>

      <div class="max-w-6xl mx-auto px-4 pt-10 pb-6 md:pt-16 md:pb-10">
        <div class="flex items-center justify-between gap-4">
          <div>
            <h1 class="text-3xl md:text-4xl font-bold tracking-tight">
              All Cubone Cards
            </h1>
            <p
              class="mt-2 text-sm md:text-base text-slate-600 dark:text-slate-300"
            >
            </p>
          </div>

          <!-- Dark mode toggle -->
          <button
            id="themeToggle"
            class="inline-flex items-center gap-2 rounded-full border border-slate-300/70 bg-white/80 px-3 py-2 text-sm shadow-sm backdrop-blur
                   hover:bg-white dark:border-slate-700 dark:bg-slate-900/80 dark:hover:bg-slate-900"
            type="button"
            aria-label="Toggle dark mode"
          >
            <span class="hidden sm:inline">Theme</span>
            <span class="block dark:hidden">üåô</span>
            <span class="hidden dark:inline">‚òÄÔ∏è</span>
          </button>
        </div>
      </div>

      <div class="max-w-6xl mx-auto px-4 py-8 space-y-6">
        <h2 class="text-xl md:text-xl font-bold tracking-tight">
          Collection rules:
        </h2>
        <p>Collect all arts, all holo patterns and all stamps.</p>
        <p>
          Exclude: bottom-left codes changes (EX era), same art different
          collection name (e.g. English vs. Japanese)
        </p>
      </div>

      <!-- Sticky glass controls -->
      <div
        class="sticky top-0 z-20 border-y border-slate-200/70 bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/50 dark:border-slate-800/70 dark:bg-slate-900/60"
      >
        <div class="max-w-6xl mx-auto px-4">
          <form
            id="controls"
            class="grid grid-cols-1 md:grid-cols-5 gap-3 py-3 items-end"
            onsubmit="event.preventDefault()"
          >
            <!-- Filter: Collection -->
            <label class="flex flex-col gap-1">
              <span
                class="text-xs font-medium text-slate-600 dark:text-slate-300"
                >Collection</span
              >
              <select
                id="collection"
                name="collection"
                class="rounded-md border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-400 dark:border-slate-700 dark:bg-slate-800"
              >
                <option value="">All collections</option>
                {
                  collectionNames.map((name) => (
                    <option value={name}>{name}</option>
                  ))
                }
              </select>
            </label>

            <!-- Search: Notes/description -->
            <label class="flex flex-col gap-1">
              <span
                class="text-xs font-medium text-slate-600 dark:text-slate-300"
                >Search description</span
              >
              <input
                id="q"
                name="q"
                type="search"
                placeholder="e.g. holo, first edition, PSA..."
                class="rounded-md border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-400 dark:border-slate-700 dark:bg-slate-800"
              />
            </label>

            <!-- Sort: Release date -->
            <label class="flex flex-col gap-1">
              <span
                class="text-xs font-medium text-slate-600 dark:text-slate-300"
                >Sort by release date</span
              >
              <select
                id="sort"
                name="sort"
                class="rounded-md border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-400 dark:border-slate-700 dark:bg-slate-800"
              >
                <option value="desc">Newest ‚Üí Oldest</option>
                <option value="asc">Oldest ‚Üí Newest</option>
              </select>
            </label>

            <!-- Toggle: Missing only -->
            <label class="flex flex-col gap-2">
              <span
                class="text-xs font-medium text-slate-600 dark:text-slate-300"
                >Missing only</span
              >
              <label
                class="relative inline-flex items-center cursor-pointer align-middle max-h-full"
              >
                <input
                  type="checkbox"
                  id="missingToggle"
                  class="sr-only peer"
                />
                <div
                  class="w-11 h-6 bg-slate-300 rounded-full peer peer-checked:bg-indigo-500
             peer-focus:ring-2 peer-focus:ring-indigo-400
             dark:bg-slate-700 dark:peer-checked:bg-indigo-600
             transition-colors duration-300"
                >
                </div>
                <span
                  class="absolute left-[2px] top-[2px] h-5 w-5 rounded-full bg-white
             transition-transform duration-300 peer-checked:translate-x-5
             dark:bg-slate-200"
                ></span>
              </label>
            </label>

            <!-- Toggle: Show extras -->
            <label class="flex flex-col gap-2">
              <span
                class="text-xs font-medium text-slate-600 dark:text-slate-300"
              >
                Show extras
              </span>
              <label
                class="relative inline-flex items-center cursor-pointer align-middle max-h-full"
              >
                <input type="checkbox" id="extraToggle" class="sr-only peer" />
                <div
                  class="w-11 h-6 bg-slate-300 rounded-full peer peer-checked:bg-indigo-500
                         peer-focus:ring-2 peer-focus:ring-indigo-400
                         dark:bg-slate-700 dark:peer-checked:bg-indigo-600
                         transition-colors duration-300"
                >
                </div>
                <span
                  class="absolute left-[2px] top-[2px] h-5 w-5 rounded-full bg-white
                         transition-transform duration-300 peer-checked:translate-x-5
                         dark:bg-slate-200"
                ></span>
              </label>
            </label>
          </form>
        </div>
      </div>
    </header>

    <!-- Content -->
    <main class="max-w-6xl mx-auto px-4 py-4 space-y-3">
      <!-- Results counter -->
      <div
        id="resultCount"
        class="pb-1 text-right text-sm text-slate-600 dark:text-slate-400"
      >
        Showing 0 cards
      </div>
      <!-- Cards -->
      <div id="list" class="space-y-4">
        {
          cards.map(({ slug, data }) => {
            const {
              name,
              number,
              release_date,
              collection_name,
              image,
              first_edition,
              holographic,
              missing,
              extra,
              notes,
            } = data;
            const searchText = [name, collection_name, number, notes]
              .join(" ")
              .toLowerCase();
            const ts = release_date.getTime();
            return (
              <article
                class="group flex flex-col md:flex-row items-stretch rounded-xl border border-slate-200 bg-white shadow-sm transition hover:shadow-md dark:border-slate-800 dark:bg-slate-900"
                data-coll={collection_name}
                data-date={release_date}
                data-search={searchText}
                data-ts={ts}
                data-missing={missing ? "1" : "0"}
                data-extra={extra ? "1" : "0"}
              >
                {/* Media */}
                <div class="flex w-full md:w-[28rem] items-center justify-center bg-slate-100 p-4 dark:bg-slate-950/40">
                  {image ? (
                    <button
                      type="button"
                      class="block w-full"
                      data-zoom-src={"." + image}
                      data-zoom-alt={name}
                      aria-label={`Zoom image of ${name}`}
                    >
                      <img
                        src={image}
                        alt={name}
                        loading="lazy"
                        class="w-full max-w-full max-h-[22rem] object-contain cursor-zoom-in transition-transform duration-300 hover:scale-[1.01]"
                      />
                    </button>
                  ) : (
                    <div class="flex h-60 w-full items-center justify-center text-slate-500">
                      No image
                    </div>
                  )}
                </div>

                {/* Meta */}
                <div class="flex flex-1 flex-col justify-between p-4 md:p-5">
                  <div class="space-y-2">
                    <div class="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                      <h2 class="text-xl font-semibold tracking-tight">
                        {name}
                      </h2>
                      <div class="flex flex-wrap gap-2 justify-start sm:justify-end">
                        {first_edition && (
                          <span
                            class="inline-flex items-center gap-1 rounded-full border border-blue-200 bg-blue-50 px-2 py-1 text-xs font-medium text-blue-800
                           dark:border-blue-900/60 dark:bg-blue-950/40 dark:text-blue-200"
                          >
                            ü•á First Edition
                          </span>
                        )}
                        {holographic && (
                          <span
                            class="inline-flex items-center gap-1 rounded-full border border-yellow-200 bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800
                           dark:border-yellow-900/60 dark:bg-yellow-950/40 dark:text-yellow-200"
                          >
                            ‚ú® Holographic
                          </span>
                        )}
                        {missing && (
                          <span
                            class="inline-flex items-center gap-1 rounded-full border border-red-900 bg-red-50 px-2 py-1 text-xs font-medium text-grey-800
                           dark:border-red-900/60 dark:bg-red-950/40 dark:text-grey-100"
                          >
                            üîé Missing
                          </span>
                        )}
                        {extra && (
                          <span
                            class="inline-flex items-center gap-1 rounded-full border border-purple-200 bg-purple-50 px-2 py-1 text-xs font-medium text-purple-800
                           dark:border-purple-900/60 dark:bg-purple-950/40 dark:text-purple-200"
                          >
                            üß© Extra
                          </span>
                        )}
                      </div>
                    </div>

                    <p class="text-sm text-slate-600 dark:text-slate-300">
                      <span class="font-medium text-slate-800 dark:text-slate-200">
                        #{number}
                      </span>
                      <span class="mx-2 text-slate-300 dark:text-slate-600">
                        ‚Ä¢
                      </span>
                      {collection_name || (
                        <span class="italic text-slate-400">No collection</span>
                      )}
                      <span class="mx-2 text-slate-300 dark:text-slate-600">
                        ‚Ä¢
                      </span>
                      {data.release_date ? (
                        new Date(data.release_date).toLocaleDateString(
                          "en-US",
                          {
                            year: "numeric",
                            month: "short",
                          }
                        )
                      ) : (
                        <span class="italic text-slate-400">Unknown date</span>
                      )}
                    </p>

                    {notes && (
                      <p class="text-sm leading-relaxed text-slate-700 dark:text-slate-300/90">
                        {notes.length > 220 ? notes.slice(0, 220) + "‚Ä¶" : notes}
                      </p>
                    )}
                  </div>
                </div>
              </article>
            );
          })
        }
      </div>

      <!-- Empty state -->
      <div
        id="empty"
        class="hidden rounded-xl border border-dashed border-slate-300 bg-white p-10 text-center text-slate-600 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300"
      >
        <div class="text-2xl">üóÇÔ∏è</div>
        <p class="mt-2 font-medium">No cards match your filters.</p>
        <p class="text-sm text-slate-500 dark:text-slate-400">
          Try changing the collection, search, or sort order.
        </p>
      </div>
    </main>

    <!-- Scripts -->
    <script type="module">
      const $ = (s) => document.querySelector(s);
      const $$ = (s) => Array.from(document.querySelectorAll(s));
      const list = $("#list");
      const empty = $("#empty");
      const collection = $("#collection");
      const missingToggle = $("#missingToggle");
      const extraToggle = $("#extraToggle");
      const q = $("#q");
      const sort = $("#sort");
      const resultCount = $("#resultCount");
      let showMissingOnly = false;
      let showExtra = false; // off = hide extras

      function apply() {
        const coll = collection.value.trim().toLowerCase();
        const query = q.value.trim().toLowerCase();
        const items = $$(".group.rounded-xl, .group.flex");
        let visible = [];

        for (const el of items) {
          const elColl = (el.getAttribute("data-coll") || "").toLowerCase();
          const elMissing = el.getAttribute("data-missing") || "0";
          const elExtra = el.getAttribute("data-extra") || "0";
          const blob = el.getAttribute("data-search") || "";

          const passColl = !coll || elColl === coll;
          const passQuery = !query || blob.includes(query);
          const passMissing = !showMissingOnly || elMissing === "1";
          // Hide extras unless toggle is on
          const passExtra = showExtra ? true : elExtra !== "1";

          if (passColl && passQuery && passMissing && passExtra) {
            el.classList.remove("hidden");
            visible.push(el);
          } else {
            el.classList.add("hidden");
          }
        }

        // Sort
        visible.sort((a, b) => {
          const ta = Number(a.getAttribute("data-ts")) || 0;
          const tb = Number(b.getAttribute("data-ts")) || 0;
          const rank = (t, dir) =>
            t === 0
              ? dir === "asc"
                ? Number.POSITIVE_INFINITY
                : Number.NEGATIVE_INFINITY
              : t;
          const dir = sort.value;
          return dir === "asc"
            ? rank(ta, dir) - rank(tb, dir)
            : rank(tb, dir) - rank(ta, dir);
        });

        visible.forEach((el) => list.appendChild(el));
        empty.classList.toggle("hidden", visible.length > 0);

        // ‚úÖ Update counter
        resultCount.textContent = `Showing ${visible.length} card${
          visible.length === 1 ? "" : "s"
        }`;
      }

      // Event listeners
      const btn = document.getElementById("themeToggle");
      btn?.addEventListener("click", () => {
        const html = document.documentElement;
        const next = html.classList.toggle("dark") ? "dark" : "light";
        localStorage.setItem("theme", next);
      });

      collection.addEventListener("change", apply);
      missingToggle.addEventListener("change", () => {
        showMissingOnly = missingToggle.checked;
        apply();
      });
      extraToggle.addEventListener("change", () => {
        showExtra = extraToggle.checked;
        apply();
      });
      q.addEventListener("input", apply);
      sort.addEventListener("change", apply);
      apply();
    </script>
  </body>
</html>
